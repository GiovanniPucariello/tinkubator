Each programming language is designed to make particular types of computations easy to express. However, the term "computation" is vague and lives at numerous abstractions. For example, to fill memory locations with binary data, to sum all the data in a column table, or to walk a graph in a directed manner are considered different types of computations. While there are "general purpose programming languages":http://en.wikipedia.org/wiki/General-purpose_programming_language (i.e. languages that can represent any type of computation), the ease by which certain particular computations are represented varies. As such, for niche computations, "domain specific languages":http://en.wikipedia.org/wiki/Domain-specific_language are usually created (i.e. languages for dealing with stock trading, data table manipulation, etc.). However, usually, the syntax of such domain specific languages greatly limits the general applicability of the language. Simply put, there is no perfect language for all programming situations. Until now?

!https://github.com/tinkerpop/mutant/raw/master/doc/images/mutant-system-arch.png!

Mutant is a programming language of programming languages. It allows developers to move between different programming languages, while, at the same time, ensuring that the underlying variable pool is accessible to all languages (to all virtual machines). This model of programming is made easy by the @ScriptEngine@ API of "JSR 223":http://jcp.org/en/jsr/detail?id=223. There are numerous @ScriptEngine@ implementations and a large collection of them can be found at the "Script Project Home Page":https://scripting.dev.java.net/. Any of @ScriptEngine@ language can be added to Mutant and thus, a developer can make use of the constructs in each of those particular languages when manipulating their variables.

!http://www.javaworld.com/javaworld/jw-04-2006/images/jw-0424-scripting3.gif!