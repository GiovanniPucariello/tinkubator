!https://github.com/tinkerpop/lopsided/raw/master/doc/images/lop-logo.png!

Linked Process is a relatively simple "XMPP-based protocol":http://xmpp.org for allowing the migration of arbitrary code between physical devices in a Linked Process cloud. This short overview will introduce the basic concepts behind Linked Process in order to make it easy for newcomers to understand the specification and its implementations.

# "Linked Process Requirements":#requirements
# "General Entities of Linked Process":#general
# "Specific Entities of Linked Process":#specific

h2(#requirements). Linked Process Requirements

Linked Process was designed to meet these requirements.

# *General-purpose*: it is required that the code executed is not  necessarily defined by the executing device, but instead can be deﬁned by the requesting device. 
  ** *Language-agnostic*: it is required that distributed code can, in principle, be written in any computer language. 
  ** *Safe*: it is required that the execution of code be conﬁned by clearly specified permissions on the executing device. 
  ** *Accessible*: it is required that various types of computing resources be accessible when permissions allow. 

# *Internet-scale*: it is required that any device with an Internet connection  (from a cell phone to a supercomputer) be able contribute and leverage computing resources. 
  ** *Decentralized*: it is required that the computing resources are not centralized or controlled by any one party. 
  ** *Discoverable*: it is required that devices be discoverable by other devices needing to leverage their resources. 
  ** *Transient*: it is required that devices coming online and oﬄine are easily incorporated and removed. 

h2(#general). General Entities of Linked Process

Linked Process makes a distinction between computing devices and computing resources.

* The term *computing device* is broad and spans particulars such as cell phones, laptops, desktops, servers, supercomputers, etc. In Linked Process, a computing device is anything that maintains a central processing unit (CPU) that can be programmed to execute any desired computation.
* The term *computing resource* is broad and spans particulars such as clock cycles, data sets, software application programming interfaces (APIs), or specialized hardware components such as cell phone cameras, field-programmable gate array (FPGA) circuits, etc.

Within the category of computing devices, there are two sub-categories: resource providers and resource consumers. Note that there is nothing that prevents a single device from being both a provider and a consumer -- moreover, being both a provider and consumer concurrently.

* *Resource providers* are computing devices that offer their computing resources for resource consumers to utilize in a Linked Process cloud.
* *Resource consumers* are computing devices that make use of computing resources offered by resources providers in a Linked Process cloud.

 The way in which resources are provided and consumed is simple. A resource provider allows resource consumers to spawn general-purpose virtual machines on their device. These virtual machines can be programmed as desired by the resource consumer in real-time in order to manipulate any of the offered resources. It is important to stress that offered resources can be anything that can be manipulated by code. Thus, resources can be as generic as the clock cycles of a resource provider (the device’s CPU and instruction set) to as complex as a specialized piece of hardware offered by the resource provider.

h2(#specific). Specific Entities of Linked Process

The Linked Process protocol is composed of various entities that yield the software infrastructure that rides atop the physical devices mentioned previous. The diagram below represents the various entities of Linked Process. The directed relationships between these entities denote "containment."

!https://github.com/tinkerpop/lopsided/raw/master/doc/images/lop-hierarchy.png!

* A *cloud* is the collection of all Linked Process-enabled software applications and the resources provided by means of the cloud.
* A *countryside* is a particular XMPP account (i.e. a bare JID) that can have any number of software applications based off of it.
* A *villein* is a Linked Process-enabled software application that is run by a resource consumer. A villein is identified by a JID. The purpose of a villein is to communicate with a resource provider’s farm in order to spawn and compute with virtual machines that leverage provided resources.
* A *farm* is a constantly running service on a resource provider and is identified by a JID. The farm manages the spawning of virtual machines.
* A *registry* is a constantly running service that provides a listing of active farms in a Linked Process cloud.  A registry is identified by a JID.
* A *virtual machine* is a computer language interpreter that is programmed by a villein in real-time to manipulate resources. The virtual machine can be made to perform any computing task as long as it does not violate certain set permissions made salient by the virtual machine’s farm. 
* A *job* is a particular computing task that a virtual machine is executing for a villein.

Below is a diagram denoting how a villein spawns a virtual machine from a farm and use that virtual machine to submit jobs to for the purpose of consuming the resource provider's resources.

!https://github.com/tinkerpop/lopsided/raw/master/doc/images/lop-overview.png!

==<hr/>==

Rodriguez, M.A., "General-Purpose, Internet-Scale Distributed Computing with Linked Process":http://markorodriguez.com/Lectures_files/cnls-linkedprocess2009.pdf, Center for Nonlinear Studies Post Doctorate Seminar, Los Alamos National Laboratory, Los Alamos, New Mexico, September 2009.