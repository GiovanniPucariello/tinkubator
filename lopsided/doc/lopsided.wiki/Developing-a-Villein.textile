This tutorial demonstrates how to create a LoPSideD villein that can be used to interact with a Linked Process cloud. The Villein LoPSideD API JavaDoc can be found "here":http://tinkerpop.com/maven2/org/linkedprocess/lopsided-villein/proto-0.1/api/. In this API is the Villein API for making it easy to create Linked Process villeins.[1]

# "Building a Villein":#building

h2(#building). Building a Villein

There are two basic models for issuing Linked Process commands (e.g. @<spawn_vm/>@, @<submit_job/>@, etc.). 

  * *synchronous*: using @org.linkedprocess.villein.patterns.SynchronousPattern@, it is possible to execute a Linked Process command and block the thread of execution until the result of the command is returned.
  * *asynchronous*: using methods in @org.linkedprocess.villein.proxies.FarmProxy@ and @org.linkedprocess.villein.proxies.VmProxy@, it is possible to execute commands that do not block, but instead, when the command completes, handler methods are invoked.

Given that Linked Process is an inherently asynchronous communication protocol, the latter model is the natural way to use Linked Process, but the prior model is easier to understand. Therefore, this tutorial will present the synchronous model before presenting the asynchronous model. Both presentations will spawn a @groovy@ virtual machine, submit the job "1 + 2;" to the virtual machine, and then terminate the virtual machine. In short, we will execute "1 + 2;" on a remote machine. Not a terribly efficient use of Linked Process, but its simple and uses the main Linked Process commands. Finally, note that nothing prevents the both the synchronous and asynchronous models from being mixed in a single villein application. For example, in some cases you want to block for a command to return and other times, you don't.

h3. The @CloudProxy@ Class

Before presenting a simple villein, it is important to understand the @org.linkedprocess.villein.proxies.CloudProxy@ class. The @CloudProxy@ class is the gateway to all the countrysides, farms, virtual machines, and jobs that a villein has access to. The @CloudProxy@ instance of a @org.linkedprocess.villein.Villein@ is a data structure that is dynamically changing as various @<presence/>@ stanzas are being received by the villein, as virtual machines are being spawned and terminated, and as jobs are being sent and received. The @CloudProxy@ is the root object of a tree of the following objects in the @org.linkedprocess.villein.proxies@ package:

bc.                                  /-- RegistryProxy
CloudProxy -- CountrysideProxy --
                                 \-- FarmProxy -- VmProxy -- JobProxy


For a collection of useful methods for allocating Linked Process entities from a @CloudProxy@, please see @org.linkedprocess.villein.patterns.EntityAllocationPattern@.

h3. A Simple Synchronous Villein

The first step in creating a villein is to construct one using the @org.linkedprocess.villein.Villein@ class. The @Villein@ constructor takes the following arguments:

  * @server@: the domain name or IP address of the XMPP server to log into.
  * @port@: the port of the XMPP server (usually 5222).
  * @username@: the account registered with the XMPP server.
  * @password@: the account password.

bc. Villein villein = new Villein("server.com", 5222, "username", "password");

It is important to note that you must have an XMPP account with some XMPP server such as GTalk, Jabber, LinkedProcess, etc. LoPSideD, and Linked Process in general, ride atop an XMPP network. To learn more about XMPP, please visit the XMPP standards foundation's "website":http://xmpp.org/.

The next step is to build a Linked Process cloud. The representation of a cloud is maintained by the @CloudProxy@ class and can be initially populated from the roster of the XMPP account with the following statement.

bc. villein.createCloudFromRoster();

When this method is called, all of the bare JIDs in the roster of the XMPP account (as saved on the XMPP server) populate the @CloudProxy@ as countrysides---more specifically, @org.linkedprocess.villein.proxies.CountrysideProxy@. There is a single @CloudProxy@ for a villein and it can be retrieved using @villein.getCloudProxy()@.

Before spawning a virtual machine, it is necessary to have access to a farm. What is required first is to determine which farm in the cloud you want to spawn the virtual machine on. Here is a simple, naive body of code to allocate a farm from the cloud.

bc. Set<FarmProxy> farmProxies = villein.getCloudProxy().getFarmProxies();
FarmProxy farmProxy;
if(farmProxies.size() > 0) {
  farmProxy = farmProxies.iterator().next();
} else {
  System.out.println("Could not find a farm in the cloud.");
  System.exit(1);
}

There are better ways to allocate a farm from a cloud and these ways have been implemented in the @EntityAllocationPattern@. Once a farm has been allocated, a virtual machine can be spawned. The simple/intuitive way to do this is with a synchronous model that blocks the thread of execution until the virtual machine has been spawned or an error has occurred. This synchronous method uses the @org.linkedprocess.villein.patterns.SynchronousPattern@ class to accomplish blocking implementations of all the Linked Process commands.

bc. VmProxy vmProxy;
try {
  ResultHolder result = SynchronousPattern.spawnVm(farmProxy, "groovy", 10000);
  if(result.wasSuccessful()) {
    vmProxy = result.getSuccess();
  } else {
    System.out.println(result.getLopError());
    System.exit(1);
  }
} catch(TimeoutException e) {
  System.out.println("It took longer than 10 seconds to spawn this virtual machine.");
  System.exit(1);
}

At the end of this body of code, either the program will have exited or a @VilleinProxy@ instance will exist as the return of @result.getSuccess()@. If a @VilleinProxy@ instance exists, then a virtual machine of @groovy@ species has been spawned. 

Once a virtual machine has been spawned on a farm, the next thing that you will probably want to do is submit a job to it. A job is a "chunk" of code that the virtual machine is to execute. Like spawning a virtual machine, there are two ways of submitting jobs: synchronous or asynchronous. The synchronous model is easier to understand and the code example below demonstrates how to execute a job.

bc. JobProxy jobProxy = new JobProxy();
jobProxy.setExpression("1 + 2;");
try {
  ResultHolder<JobProxy> result = SynchronousPattern.submitJob(vmProxy, jobProxy, 5000);
  if(result.wasSuccessful()) {
    System.out.println(result.getSuccess().getResult());
  } else {
    System.out.println(result.getLopError());
    System.exit(1);
  }
} catch(TimeoutException e) {
  System.out.println("It took longer than 5 seconds to execute this job.");
  System.exit(1);
}

Finally, once you have calculated "1 + 2;" on the remote virtual machine, you can terminate the virtual machine with the following synchronous body of code.

bc. SynchronousPattern.terminateVm(vmProxy, -1);


h3. A Simple Asynchronous Villein

Suppose that you want to spawn a virtual machine, but you don't want the spawning code to block. Thus, you want to take advantage of the asynchronous nature of Linked Process. To do this, you need to write handler methods that are invoked when commands are completed. 

First, lets create a villein and get one farm out of the cloud to spawn a virtual machine on. You will note that you have already seen this body of code from the previous section.

bc. Villein villein = new Villein("server.com", 5222, "username", "password");
villein.createCloudFromRoster();
Set<FarmProxy> farmProxies = villein.getCloudProxy().getFarmProxies();
FarmProxy farmProxy;
if(farmProxies.size() > 0) {
  farmProxy = farmProxies.iterator().next();
} else {
  System.out.println("Could not find a farm in the cloud.");
  System.exit(1);
}

Next, lets spawn a virtual machine. Note that there are two handler methods.  A handler for a successful spawn and a handler for an unsuccessful spawn.

bc. VmProxy vmProxy;
Handler<VmProxy> successSpawnHandler = new Handler<VmProxy>() {
  public void handle(VmProxy vmProxy) {
    vmProxy = vmProxy;
  }
};
Handler<LopError> errorSpawnHandler = new Handler<LopError>() {
  public void handle(LopError lopError) {
    System.out.println(lopError);
    System.exit(1);
  }
};
farmProxy.spawnVm("groovy", successSpawnHandler, errorSpawnHandler);

Once a @VmProxy@ has been instantiated, you can submit a job to it. Again, there is a handler for a successful job and a handler for an unsuccessful job.

bc. JobProxy jobProxy = new JobProxy();
jobProxy.setExpression("1 + 2;");
Handler<JobProxy> successSubmitHandler = new Handler<JobProxy>() {
  public void handle(JobProxy jobProxy) {
    jobProxy = jobProxy;
  }
};
Handler<LopError> errorSubmitHandler = new Handler<LopError>() {
  public void handle(LopError lopError) {
    System.out.println(lopError);
    System.exit(1);
  }
};
vmProxy.submitJob(jobProxy, successSubmitHandler, errorSubmitHandler);

Finally, when we are done computing with this virtual machine, lets terminate it.

bc. Handler<Object> successTerminateHandler = new Handler<Object>() {
  public void handle(Object object) { 
    System.out.println("All done. Goodbye.");
    System.exit(0);
  }
};
Handler<LopError> errorTerminateHandler = new Handler<LopError>() {
  public void handle(LopError lopError) {
    System.out.println(lopError);
    System.exit(1);
  }
};
vmProxy.terminateVm(successTerminateHandler, errorTerminateHandler);

Again, realize that these methods (e.g. @FarmProxy.spawnVm()@) do not block and thus, once they are invoked, the next statement in you code is invoked. If the next statement requires information from a previous command, then you will need to make use of monitors to hold the thread until the handler is called. In short, this is what the @SynchronousPattern@ does for you automatically. The asynchronous model is useful when you can make use of the parallel execution of commands. A very helpful class for parallel execution of commands is the @ScatterGatherPattern@.

h3. A Short Note on @ScatterGatherPattern@

Note that there is a higher-level abstraction for performing commands across a set of entities. Please review @org.linkedprocess.villein.patterns.ScatterGatherPattern@ for details on how to spawn a set of virtual machines, distribute a collection of jobs to a collection of virtual machines, terminate a collection of virtual machines, etc. @ScatterGatherPattern@ is a very useful class for aiding in the parallel manipulation of many entities in a cloud. Below is a short code snippet demonstrating how to spawn two @grooy@ virtual machines on each farm in the cloud.

bc. Set<ResultHolder<VmProxy>> results =
ScatterGatherPattern.scatterSpawnVm(villein.getCloudProxy().getFarmProxies(), "groovy", 2, -1);

This statement will block indefinitely (the final -1 parameter) until all @<spawn_vm/>@ commands have returned (as a success or as an error). The @results@ will either be a success or an error. For those results that are a success, there will be an accompanying @VmProxy@ instance. For those that are errors, there will be an accompanying @LopError@ instance. Finally, @ScatterGatherPattern@ supports both synchronous and asynchronous versions of the various commands.

==<hr/>==

fn1. Note that with the LoPSideD villein API distribution, there is a package called @org.linkedprocess.demos@ that has various demonstration villeins written. Please review the source code of these classes to learn the basics techniques for creating a LoPSideD villein. This tutorial will only present the core concepts.